// Import ApolloServer to create a GraphQL server
import { ApolloServer } from "apollo-server";

// Import Prisma Client (auto-generated by Prisma after `npx prisma generate`)
import { PrismaClient } from "@prisma/client";

// Initialize Prisma Client (used to interact with the database)
const prisma = new PrismaClient();

// GraphQL schema definition (SDL)
// - Defines a List type with fields id, title, createdAt
// - Defines queries (hello, lists)
// - Defines a mutation (addList)
const typeDefs = `
  type List {
    id: ID!
    title: String!
    createdAt: String!
  }

  type User {
    id: ID!
    userName: String!
    password: String!
    createdAt: String!
  }

  type Query {
    lists: [List!]!
    users: [User!]! 
  }

  type Mutation {
    addList(title: String!): List!
    deleteList(id: ID!): List!
    addRegister(userName: String!, password: String!): User!
  }
`;

// GraphQL resolvers
// - Maps queries & mutations to actual database operations using Prisma
const resolvers = {
  Query: {
    lists: async () => prisma.list.findMany({ orderBy: { createdAt: "desc" } }),
    users: async () => prisma.user.findMany({ orderBy: { createdAt: "desc" } })
  },
  Mutation: {
    addList: async (_, { title }) => prisma.list.create({ data: { title } }),
    deleteList: async (_, { id }) =>
      prisma.list.delete({ where: { id: Number(id) } }),
    addRegister: async (_, { userName, password }) =>
      prisma.user.create({ data: { userName, password } })
  }
};

// Create an Apollo Server instance with schema + resolvers
const server = new ApolloServer({ typeDefs, resolvers });

// Start the server on port 4001
server.listen({ port: 4001 }).then(({ url }) => {
  console.log(`ğŸš€ Server ready at ${url}`);
});
